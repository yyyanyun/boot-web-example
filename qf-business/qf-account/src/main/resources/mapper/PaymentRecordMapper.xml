<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.account.mapper.PaymentRecordMapper">
    <resultMap id="BaseResultMap" type="com.qf.account.entity.PaymentRecord">
        <!--@mbg.generated-->
        <!--@Table payment_record-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="trade_no" jdbcType="BIGINT" property="tradeNo"/>
        <result column="member_type" jdbcType="INTEGER" property="memberType"/>
        <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber"/>
        <result column="order_type" jdbcType="INTEGER" property="orderType"/>
        <result column="order_no" jdbcType="INTEGER" property="orderNo"/>
        <result column="amount" jdbcType="DECIMAL" property="amount"/>
        <result column="payment_channel" jdbcType="INTEGER" property="paymentChannel"/>
        <result column="payment_currency" jdbcType="INTEGER" property="paymentCurrency"/>
        <result column="actual_payment_cny" jdbcType="DECIMAL" property="actualPaymentCny"/>
        <result column="exchange_rate" jdbcType="DECIMAL" property="exchangeRate"/>
        <result column="created_time" jdbcType="TIMESTAMP" property="createdTime"/>
        <result column="completed_time" jdbcType="TIMESTAMP" property="completedTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        trade_no,
        member_type,
        phone_number,
        order_type,
        order_no,
        amount,
        payment_channel,
        payment_currency,
        actual_payment_cny,
        exchange_rate,
        created_time,
        completed_time,
        `status`
    </sql>

    <select id="selectByPhoneOrTradeNoOrOrderNo" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List">
        </include>
        from payment_record
        <where>
            <if test="PaymentRecord.phoneNumber != null">
                phone_number like concat('%', #{PaymentRecord.phoneNumber}, '%')
            </if>
            <if test="PaymentRecord.tradeNo != null">
                or order_no like concat('%', #{PaymentRecord.orderNo}, '%')
            </if>
            <if test="PaymentRecord.tradeNo != null">
                or trade_no like concat('%', #{param1.tradeNo}, '%')
            </if>
        </where>
    </select>

    <select id="selectList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List">
        </include>
        from payment_record
        <where>
            <if test="PaymentRecord.tradeNo != null">
                trade_no = #{PaymentRecord.tradeNo}
            </if>
            <if test="PaymentRecord.orderNo != null">
                and order_no = #{PaymentRecord.orderNo}
            </if>
            <if test="PaymentRecord.phoneNumber != null">
                and phone_number = #{PaymentRecord.phoneNumber}
            </if>
            <if test="PaymentRecord.memberType != null and PaymentRecord.memberType == 1">
                and member_type = #{PaymentRecord.memberType}
            </if>
            <if test="PaymentRecord.memberType != null and PaymentRecord.memberType == 2">
                and member_type = #{PaymentRecord.memberType}
            </if>
            <if test="PaymentRecord.status != null and PaymentRecord.status == 1">
                and status = #{PaymentRecord.status}
            </if>
            <if test="PaymentRecord.status != null and PaymentRecord.status == 2">
                and status = #{PaymentRecord.status}
            </if>
            <if test="PaymentRecord.status != null and PaymentRecord.status == 3">
                and status = #{PaymentRecord.status}
            </if>
            <if test="PaymentRecord.orderType != null and PaymentRecord.orderType == 1">
                and order_no = #{PaymentRecord.orderType}
            </if>
            <if test="PaymentRecord.orderType != null and PaymentRecord.orderType == 2">
                and order_no = #{PaymentRecord.orderType}
            </if>
            <if test="PaymentRecord.paymentChannel != null and PaymentRecord.paymentChannel == 1">
                and payment_channel = #{PaymentRecord.paymentChannel}
            </if>
            <if test="PaymentRecord.paymentChannel != null and PaymentRecord.paymentChannel == 2">
                and payment_channel = #{PaymentRecord.paymentChannel}
            </if>
            <if test="PaymentRecord.paymentChannel != null and PaymentRecord.paymentChannel == 3">
                and payment_channel = #{PaymentRecord.paymentChannel}
            </if>
            <if test="PaymentRecord.paymentChannel != null and PaymentRecord.paymentChannel == 4">
                and payment_channel = #{PaymentRecord.paymentChannel}
            </if>
            <if test="PaymentRecord.paymentChannel != null and PaymentRecord.paymentChannel == 5">
                and payment_channel = #{PaymentRecord.paymentChannel}
            </if>
            <if test="PaymentRecord.createdTime != null and PaymentRecord.createDate != null">
                and created_time between #{PaymentRecord.createdTime} and #{PaymentRecord.createDate}
            </if>
            <if test="PaymentRecord.completedTime != null and PaymentRecord.finishTime != null">
                and completed_time between #{PaymentRecord.completedTime} and #{PaymentRecord.finishTime}
            </if>
        </where>
    </select>
</mapper>