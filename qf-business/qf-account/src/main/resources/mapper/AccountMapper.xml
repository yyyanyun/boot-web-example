<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qf.account.mapper.AccountMapper">
    <resultMap id="BaseResultMap" type="com.qf.account.entity.Account">
        <!--@mbg.generated-->
        <!--@Table t_account-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="member_type" jdbcType="INTEGER" property="memberType"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="balance" jdbcType="DECIMAL" property="balance"/>
        <result column="available_balance" jdbcType="DECIMAL" property="availableBalance"/>
        <result column="pending_balance" jdbcType="DECIMAL" property="pendingBalance"/>
        <result column="frozen_balance" jdbcType="DECIMAL" property="frozenBalance"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        member_type,
        phone,
        balance,
        available_balance,
        pending_balance,
        frozen_balance,
        create_time,
        last_login_time,
        `status`
    </sql>


    <select id="selectByPhoneOrId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List">
        </include>
        from t_account
        <where>
            <if test="id != null">
                id like concat('%', #{id}, '%')
            </if>
            <if test="phone != null">
                or phone like concat('%', #{phone}, '%')
            </if>
        </where>
    </select>


    <resultMap id="BaseResultMapSub" type="com.qf.account.entity.Account" extends="BaseResultMap">
        <collection property="paymentRecordList" resultMap="com.qf.account.mapper.PaymentRecordMapper.BaseResultMap">
        </collection>
    </resultMap>


    <select id="selectAdvancedSearch" resultMap="BaseResultMapSub">
        select a.id,
               a.member_type,
               a.phone,
               a.balance,
               a.available_balance,
               a.pending_balance,
               a.frozen_balance,
               a.create_time,
               a.last_login_time,
               a.status,
               p.id,
               p.account_id,
               p.trade_no,
               p.member_type,
               p.phone_number,
               p.order_type,
               p.order_no,
               p.amount,
               p.payment_channel,
               p.payment_currency,
               p.actual_payment_cny,
               p.exchange_rate,
               p.created_time,
               p.completed_time,
               p.status
        from t_account a
                 join payment_record p on a.id = p.account_id
        <where>
            <if test="Account.id != null">
                a.id= #{Account.id}
            </if>
            <if test="Account.phone != null">
                and a.phone= #{Account.phone}
            </if>
            <if test="Account.memberType != null and Account.memberType == 1">
                and a.member_type = #{Account.memberType}
            </if>
            <if test="Account.memberType != null and Account.memberType == 2">
                and a.member_type = #{Account.memberType}
            </if>
            <if test="Account.status != null and Account.status == 1">
                and a.status = #{Account.status}
            </if>
            <if test="Account.status != null and Account.status == 0">
                and a.status = #{Account.status}
            </if>
            <if test="Account.createTime != null and Account.completionTime != null">
                and a.create_time between #{Account.createTime} and #{Account.completionTime}
            </if>
            <if test="paymentStatus != null and paymentStatus == 1">
                and p.status = #{paymentStatus}
            </if>
            <if test="paymentStatus != null and paymentStatus == 2">
                and p.status = #{paymentStatus}
            </if>
            <if test="paymentStatus != null and paymentStatus == 3">
                and p.status = #{paymentStatus}
            </if>
        </where>
    </select>
</mapper>